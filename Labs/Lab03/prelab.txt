Exercise 1: gdb
1. How do you compile your program so that you get extra debugging information (variable and function names, line numbers, and so on) in gdb?
gcc -g [source].c

2. What is the syntax of the command to set a breakpoint at line 50 that you would type at the gdb prompt?
Within gdb, type "b 50"

3.Assume that a) your program has an integer variable called count; b) you started the execution of the program in gdb; c) the program is stopped at a breakpoint where the variable count has been defined,  what is the syntax of the gdb command to print the value of count?
"disp count"

Again, with the exact same conditions of gdb as above, what is the syntax of the command to change the value of the integer count to 42?
"set variable count = 42"

Exercise 2: RISC-V Registers
ra
x1, return address for jumps

sp
x2, stack pointer

Registers to hold parameters and return values for functions/procedures
x10, ABI Name:a0, description:return value or function argument 0
x11, a1, return value or function argument 1

Registers to hold temporary values that are not preserved across different function calls:
x10-17, a0 to a7, argument registers, and
x5-7, x28-31, t0 to t6, temporary registers, are not preserved across function calls

Registers to hold values that are supposed to be preserved across different function calls.
x8-9, x18-27, s0 to s11, saved registers, are preserved across function calls

Exercise 3: Simple RISC-V instructions
add s1, s2, s3
 a. Adds the values contained in the two source registers; stores the result into the destination register. Effectively: s1 = s2 + s3.
 b. Source Registers: s2, s3
 c. Destination Register: s1
addi s1, s3, -2
 a. Adds the values contained in the a source register and an immedicate value; stores the result into the destination register. Effectively: s1 = s3 + (-2).
 b. Source registers: s3
 c. Destination: s1
lw t6, 4(s0)
 a. Adds the values contained in a source registers and an immedicate value; stores the word-aligned result into the destination register. Effectively: t6 = s0 + 4.
 b. Source Registers: s0
 c. Destination Register: t6
add t3, s1, s2
 a. Adds the values contained in the two source registers; stores the result into the destination register. Effectively: t3 = s1 + s2.
 b. Source Registers: s2, s1
 c. Destination Register: t3
sub s0, t1, s2
 a. Subtracts the values contained in the two source registers; stores the result into the destination register. Effectively: s0 = t1 - s2.
 b. Source Registers: s2, t1
 c. Destination Register: s0

Exercise 4: Working in different bases
59 (base 10) to 8-bit binary: 59 = 32 + 16 + 8 + 2 + 1 = 00011101
10111011 (base 2) to 8-bit hexadecimal: Is 187(10) = 187/16/16 = 0x000000BB
129 (base 10) to 8-bit hexadecimal: 129 = 129/16/16 = 0x81
0xFEEDBEEF (base 16) to binary (use as many bits as required): 0xFEEDBEEF = 15*16**7+14*16**6 + 14*16**5 + 13*16**4 + 11*16**3 + 14*16**2 + 14*16**1 + 15=4276993775(10)/2/2/2/2/2/2/2/2/2/2/2/2/2/2/2/2/2/2/2/2/2/2 = 11111110111011011011111011101111
0743 (base 8) to binary (use as many bits as required) = 7*8**2+4*8**1+3 = 483(10)/2/2/2/2/2/2/2/2 = 111100011
